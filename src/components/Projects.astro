---
import { getCollection } from "astro:content";
import { Image } from "astro:assets"; // Import Image component for optimized images
import { Fragment } from "astro/jsx-runtime"; // To use for rendering raw SVG safely

// Define a mapping for technology tags to colors (you can expand this as needed)
const tagColors: Record<string, { bg: string; text: string }> = {
  Django: { bg: "bg-green-100", text: "text-green-800" },
  "Vue.js": { bg: "bg-blue-100", text: "text-blue-800" },
  PostgreSQL: { bg: "bg-purple-100", text: "text-purple-800" },
  FastAPI: { bg: "bg-red-100", text: "text-red-800" },
  Pandas: { bg: "bg-yellow-100", text: "text-yellow-800" },
  Polars: { bg: "bg-blue-100", text: "text-blue-800" },
  OpenCV: { bg: "bg-green-100", text: "text-green-800" },
  Flask: { bg: "bg-blue-100", text: "text-blue-800" },
  Python: { bg: "bg-red-100", text: "text-red-800" },
  Docker: { bg: "bg-indigo-100", text: "text-indigo-800" },
  Redis: { bg: "bg-orange-100", text: "text-orange-800" },
  Matplotlib: { bg: "bg-yellow-100", text: "text-yellow-800" },
  Seaborn: { bg: "bg-green-100", text: "text-green-800" },
  Streamlit: { bg: "bg-purple-100", text: "text-purple-800" },
  WebSocket: { bg: "bg-pink-100", text: "text-pink-800" },
  // Add more technologies and their colors here
};

// Define a mapping for project categories/types to background colors and SVG icons
// You might need to adjust these based on your project categories or just use a generic icon
const projectVisuals: Record<string, { gradient: string; svg: string }> = {
  "E-commerce Platform": {
    gradient: "from-blue-400 to-blue-600",
    svg: `<svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path></svg>`,
  },
  "Data Analytics Dashboard": {
    gradient: "from-green-400 to-green-600",
    svg: `<svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path></svg>`,
  },
  "Computer Vision App": {
    gradient: "from-purple-400 to-purple-600",
    svg: `<svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>`,
  },
  "Microservices API Gateway": {
    gradient: "from-orange-400 to-orange-600",
    svg: `<svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0"></path></svg>`,
  },
  "Data Visualization Tool": {
    gradient: "from-teal-400 to-teal-600",
    svg: `<svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"></path></svg>`,
  },
  "Real-time Chat Application": {
    gradient: "from-pink-400 to-pink-600",
    svg: `<svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path></svg>`,
  },
};

const projectCollection = await getCollection("projects");

// Sort projects by date, newest first
const allProjects = projectCollection.sort(
  (a, b) => b.date - a.date
);
---

<section id="projects" class="py-16 bg-white">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-12">
      <h2 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-4">
        Featured Projects
      </h2>
      <div
        class="w-20 h-1 bg-gradient-to-r from-blue-500 to-purple-600 mx-auto"
      >
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {
        allProjects.map((project) => (
          <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow">
            {project.data.image ? (
              <div
                class={`h-48 flex items-center justify-center ${projectVisuals[project.data.title]?.gradient || "bg-gray-400"}`}
              >
                {/* You might use the actual image here, or keep the SVG if the image is a placeholder */}
                {/* <Image src={project.image} alt={project.title} width={400} height={200} class="object-cover w-full h-full" /> */}
                <Fragment
                  set:html={
                    projectVisuals[project.data.title]?.svg ||
                    `<svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v14a1 1 0 01-1 1H5a1 1 0 01-1-1V5z"></path></svg>`
                  }
                />
              </div>
            ) : (
              <div
                class={`h-48 flex items-center justify-center ${projectVisuals[project.data.title]?.gradient || "bg-gray-400"}`}
              >
                <Fragment
                  set:html={
                    projectVisuals[project.data.title]?.svg ||
                    `<svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v14a1 1 0 01-1 1H5a1 1 0 01-1-1V5z"></path></svg>`
                  }
                />
              </div>
            )}
            <div class="p-6">
              <h3 class="text-xl font-semibold text-gray-900 mb-2">
                {project.data.title}
              </h3>
              <p class="text-gray-600 mb-4">{project.data.description}</p>
              <div class="flex flex-wrap gap-2 mb-4">
                {project.data.technologies.map((tech) => (
                  <span
                    class={`px-3 py-1 text-sm rounded-full ${tagColors[tech]?.bg || "bg-gray-100"} ${tagColors[tech]?.text || "text-gray-800"}`}
                  >
                    {tech}
                  </span>
                ))}
              </div>
              <div class="flex justify-between">
                {/* Consider making these links dynamic, e.g., to `/projects/${project.slug}` */}
                <a
                  href={`/projects/${project.data.slug}`}
                  class="text-blue-600 hover:text-blue-800 font-medium"
                >
                  View Project
                </a>
                <a
                  href="#"
                  class="text-gray-600 hover:text-gray-800"
                  aria-label="View project on GitHub"
                >
                  {/* Generic GitHub icon - ensure you have a link to GitHub in your project data if needed */}
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path
                      fill-rule="evenodd"
                      d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </a>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>
